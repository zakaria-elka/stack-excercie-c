#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
// made by zakaria elkarmoudi

typedef struct
{
    int nx;
    int i;
}element;
element *pile;




void depiler(char mat[10][10],int nr)
{int j;
j=pile->i;
if(j==0)
      {   textcolor(4);
          cprintf("pile vide\n");
      clrscr();}
else
      {

      if(nr==1)
      {mat[pile[j-2].nx][pile[j-1].nx]=' ';}
      else
      {mat[pile[j-2].nx][pile[j-1].nx]='.';}

      pile->i=j-2;

      if(pile->i==0)
      {
         pile=(element*)malloc(2*sizeof(element));
         pile->i=0;
      }
      else
      pile=realloc(pile,(pile->i)*sizeof(element));}







}





void empiler(int x,int y)
{

 if(pile->i<=100)
   {
     pile[pile->i-2].nx=x;
     pile[pile->i-1].nx=y;

     }
 else
     {   textcolor(4);
         cprintf("pile plein\n");
     clrscr();}



}








void avance(char mat[10][10])
{int x,y;
pile->i=pile->i+2;
if(pile->i>2 && pile->i<=100)
 {pile=(element*)realloc(pile,pile->i*sizeof(element));}
do{
 textcolor(1);
 cprintf(" enter coordonnes x: ");
 scanf("%d",&x);
 textcolor(2);
 cprintf(" \n enter coordonnes y: ");
 scanf("%d",&y);
 if(x>10 || y>10)
 {   textcolor(4);
     cprintf("Resaisir\n");
 }
}while(x>10 || y>10);
 clrscr();
 mat[x][y]='x';
 empiler(x,y);


}



void affpile()
{int i;
i=pile->i;

if((i-2)<0)
{   textcolor(4);
    cprintf("pile vide");
 }
else{
do{
  puts("___________");
  printf("|( %d , %d )|\n",pile[i-2].nx,pile[i-1].nx);

i=i-2;

}while(i>0);
}}



void sgrille(char mat[10][10],int csa)
{int i,j;

if(csa%2!=0)
{
     for(i=0;i<10;i++)
{for(j=0;j<10;j++)
    mat[i][j]=' ';
}}
else
{
     for(i=0;i<10;i++)
{for(j=0;j<10;j++)
    mat[i][j]='.';
}}



{for(i=0;i<pile->i;i++)
{
 mat[pile[i].nx][pile[i+1].nx]='X';
}
}
}




int main()
{char mat[10][10];
int i,j,n,r=0,sa=1;
pile=(element*)malloc(2*sizeof(element));
pile->i=0;


for(i=0;i<10;i++)
{for(j=0;j<10;j++)
    mat[i][j]='.';
}

table:{
textcolor(2);
cprintf(" \n\n\n                    MENU              \n\n\n");

printf("___________________________________________________________________________\n");
printf("\n1)initailiser\t\t\t");
printf("      |");
{for(j=0;j<10;j++)
    printf("\t%c",mat[0][j]);
    printf(" |");
}

printf("\n\n2)avancer\t\t\t");
printf("      |");
{for(j=0;j<10;j++)
    printf("\t%c",mat[1][j]);
    printf(" |");
}
printf("\n\n3)reculer\t\t\t");
printf("      |");
{for(j=0;j<10;j++)
    printf("\t%c",mat[2][j]);
    printf(" |");
}
printf("\n\n4)grille:sans/avec \t\t");
printf("      |");
{for(j=0;j<10;j++)
    printf("\t%c",mat[3][j]);
    printf(" |");
}
printf("\n\n5)affiche pile \t\t\t");
printf("      |");
{for(j=0;j<10;j++)
    printf("\t%c",mat[4][j]);
    printf(" |");
}

printf("\n\n6)quitter\t\t\t");
for(i=5;i<10;i++)
{   printf("      |");
    for(j=0;j<10;j++)
    printf("\t%c",mat[i][j]);
    printf(" |\n\n\t\t\t\t");

}printf("      |");}
puts("\t__________________________________________________________________________|");
printf ("\n\n");


while (1){
 printf ("choisir option:");
 scanf ("%d",&n);



if(n==3)
{
depiler(mat,r);
clrscr();
goto table;

}






if(n==2)
{

  avance(mat);
  clrscr();
  goto table;

  }


if(n==4)
{ r=1;
  sgrille(mat,sa);
  sa++;
  clrscr();
  goto table;

}


if(n==1)
{
 for(i=0;i<10;i++)
{for(j=0;j<10;j++)
    mat[i][j]='.';

}
free(pile);
pile=(element*)malloc(2*sizeof(element));
pile->i=0;
clrscr();
goto table;

}


if(n==5)
{printf("\n");
 clrscr();
 affpile();
 getch();
 clrscr();
 goto table;

}


if(n==6)
{textcolor(1);
 cprintf("End OF programme.\n\n");
 break;}


if(n>6 || n<1)
{clrscr();
goto table;}

printf("\n\n\n\n\n\n\n\n\n");



}
    return 0;
}
